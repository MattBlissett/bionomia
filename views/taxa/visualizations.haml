-content_for :title do
  #{@taxon.family} #{I18n.t('taxa.visualizations')}

- content_for :scripts do
  %script{src: "/js/application.js"}
  %script{src: "//www.gstatic.com/charts/loader.js"}
  %script{src: "/js/jquery.throttledresize.js"}

  :javascript
    $.fn.outerHTML = function(s) {
    return (s)
      ? this.before(s).remove()
      : jQuery("<p>").append(this.eq(0).clone()).html();
    }

    $(function() {
      Application.init("", "GET", "/taxa");

      var timeline = #{@timeline};

      function range(a, b) {
        if (a === b) {
          return a.toString();
        } else {
          return a + " â€“ " + b;
        }
      }

      function popup(html, range) {
        return $(html).find(".range").text(range).parents(".card").outerHTML();
      }

      function timeLine() {
        arr = $.map(timeline, function( n, i ) {
          var startDate = new Date(n[3]);
          var endDate = new Date(n[4]);
          var startYear = startDate.getFullYear();
          var endYear = endDate.getFullYear();
          var birthDate = (n[5] !== "") ? new Date(n[5]) : "";
          var deathDate = (n[6] !== "") ? new Date(n[6]) : "";
          var part = [];
          if (birthDate && deathDate) {
            var proper_order = [ birthDate, startDate, endDate, deathDate ];
            var sorted_order = proper_order.slice().sort(function(a,b) { return a - b; });
            var birthYear = birthDate.getFullYear();
            var deathYear = deathDate.getFullYear();
            if (JSON.stringify(proper_order) === JSON.stringify(sorted_order)) {
              part.push([ n[1], range(startYear, endYear), popup(n[2], range(startYear, endYear)), 'fill-color:#3a7179;', startDate, endDate ]);
            } else {
              if (birthDate >= endDate) {
                part.push([ n[1], range(startYear, endYear), popup(n[2], range(startYear, endYear)), 'fill-color:#dc3545;', startDate, endDate ]);
              } else if (deathDate <= startDate) {
                part.push([ n[1], range(startYear, endYear), popup(n[2], range(startYear, endYear)), 'fill-color:#dc3545;', startDate, endDate ]);
              } else if (birthDate >= startDate && endDate <= deathDate) {
                part.push([ n[1], range(startYear, birthYear), popup(n[2], range(startYear, birthYear)), 'fill-color:#dc3545;', startDate, birthDate ]);
                part.push([ n[1], range(birthYear, endYear), popup(n[2], range(birthYear, endYear)), 'fill-color:#3a7179;', birthDate, endDate ]);
              } else if (birthDate >= startDate && endDate > deathDate) {
                part.push([ n[1], range(startYear, birthYear), popup(n[2], range(startYear, birthYear)), 'fill-color:#dc3545;', startDate, birthDate ]);
                part.push([ n[1], range(birthYear, deathYear), popup(n[2], range(birthYear, deathYear)), 'fill-color:#3a7179;', birthDate, deathDate ]);
                part.push([ n[1], range(deathYear, endYear), popup(n[2], range(deathYear, endYear)), 'fill-color:#dc3545;', deathDate, endDate ]);
              } else if (birthDate < startDate && endDate >= deathDate) {
                part.push([ n[1], range(startYear, deathYear), popup(n[2], range(startYear, deathYear)), 'fill-color:#3a7179;', startDate, deathDate ]);
                part.push([ n[1], range(deathYear, endYear), popup(n[2], range(deathYear, endYear)), 'fill-color:#dc3545;', deathDate, endDate ]);
              }
            }
          } else if ( !birthDate && !deathDate) {
            if (endYear - startYear >= 120 ) {
              part.push([ n[1], range(startYear, endYear), popup(n[2], range(startYear, endYear)), 'fill-color:#dc3545;', startDate, endDate ]);
            } else {
              part.push([ n[1], range(startYear, endYear), popup(n[2], range(startYear, endYear)), 'fill-color:#3a7179;', startDate, endDate ]);
            }
          } else {
            if(!deathDate && birthDate >= endDate) {
              part.push([ n[1], range(startYear, endYear), popup(n[2], range(startYear, endYear)), 'fill-color:#dc3545;', startDate, endDate ]);
            } else if (!deathDate && birthDate >= startDate) {
              var birthYear = birthDate.getFullYear();
              part.push([ n[1], range(startYear, birthYear), popup(n[2], range(startYear, birthYear)), 'fill-color:#dc3545;', startDate, birthDate ]);
              part.push([ n[1], range(birthYear, endYear), popup(n[2], range(birthYear, endYear)), 'fill-color:#3a7179;', birthDate, endDate ]);
            } else if (!deathDate && birthDate < startDate) {
              part.push([ n[1], range(startYear, endYear), popup(n[2], range(startYear, endYear)), 'fill-color:#3a7179;', startDate, endDate ]);
            }
            if(!birthDate && deathDate <= startDate) {
              part.push([ n[1], range(startYear, endYear), popup(n[2], range(startYear, endYear)), 'fill-color:#dc3545;', startDate, endDate ]);
            } else if (!birthDate && deathDate <= endDate) {
              var deathYear = deathDate.getFullYear();
              part.push([ n[1], range(startYear, deathYear), popup(n[2], range(startYear, deathYear)), 'fill-color:#3a7179;', startDate, deathDate ]);
              part.push([ n[1], range(deathYear, endYear), popup(n[2], range(deathYear, endYear)), 'fill-color:#dc3545;', deathDate, endDate ]);
            } else if (!birthDate && deathDate > endDate) {
              part.push([ n[1], range(startYear, endYear), popup(n[2], range(startYear, endYear)), 'fill-color:#3a7179;', startDate, endDate ]);
            }
          }
          return part;
        });
        return arr;
      }

      function drawVisualizations() {
        var container = $('#timeline')[0],
            chart = new google.visualization.Timeline(container),
            dataTable = new google.visualization.DataTable(),
            rowHeight = 41,
            options = {};

        if (timeline.length == 1) {
          return;
        }

        if (timeline.length > 1) {
          dataTable.addColumn({ type: 'string', id: 'Fullname' });
          dataTable.addColumn({ type: 'string', id: 'Bar label' });
          dataTable.addColumn({ type: 'string', role: 'tooltip' });
          dataTable.addColumn({ type: 'string', role: 'style' });
          dataTable.addColumn({ type: 'date', id: 'Start' });
          dataTable.addColumn({ type: 'date', id: 'End' });
          dataTable.addRows(timeLine());

          options = {
            height: dataTable.getNumberOfRows() * rowHeight + 50,
            timeline: {
              groupByRowLabel: true,
              avoidOverlappingGridLines: false
            }
          };

          google.visualization.events.addListener(chart, 'onmouseover', function(e) {
            if (e.row !== null) { $('#timeline').css('cursor','pointer'); }
          });
          google.visualization.events.addListener(chart, 'onmouseout', function() { $('#timeline').css('cursor','default'); });
          google.visualization.events.addListener(chart, 'select', function() {
            var sel = chart.getSelection()[0];
            var id = $(dataTable.getValue(sel.row, 2)).attr("data-identifier");
            var start_year = dataTable.getValue(sel.row, 4).getFullYear() - 1;
            var end_year = dataTable.getValue(sel.row, 5).getFullYear() + 1;
            if (typeof sel.row !== "undefined" && sel.row !== null) {
              window.location = "/" + id + "/specimens?action=#{@action}&family=#{@taxon.family}&start_year=" + start_year + "&end_year=" + end_year;
            }
          });

          chart.draw(dataTable, options);
        }
      }

      google.charts.load('current', {
        packages: ['timeline'],
        language: '#{I18n.locale.to_s}',
        mapsApiKey: "#{Settings.google.api_key}"
      });
      google.charts.setOnLoadCallback(drawVisualizations);

      $(window).on("throttledresize", function(event) {
        drawVisualizations();
      });

    });

-content_for :jumbotron do
  %div{class:"jumbotron jumbotron-fluid d-flex flex-wrap"}
    %div{class:"mr-auto p-2"}
      - if @taxon.has_image?
        %div{class:"media"}
          %img{src: "/images/taxa/#{@taxon.image.file_name}", alt:"#{@taxon.family}", class:"mr-4"}
          %div{class:"media-body"}
            %h1{class:"h2 mt-0"} #{@taxon.family}
            %p{class: "lead text-muted"}
              - if @pagy && @pagy.count > 0
                #{number_to_human(@pagy.count, units: :"taxa.number_#{@action}", delimiter: ",", precision: 0)}
              - else
                - if @action == "collected"
                  = I18n.t('taxa.none_collected', taxon: h(@taxon.family))
                - else
                  = I18n.t('taxa.none_identified', taxon: h(@taxon.family))
        %p{class:"small text-muted mb-0 mt-2"}
          - if @taxon.image.credit
            #{@taxon.image.credit}
            %br
          - if @taxon.image.licenseURL
            %a{href: "#{@taxon.image.licenseURL}"}= @taxon.image.licenseURL
      - else
        %h1{class:"h2 mt-0"} #{@taxon.family}
        %p{class: "lead text-muted"}
          - if @pagy && @pagy.count > 0
            #{number_to_human(@pagy.count, units: :"taxa.number_#{@action}", delimiter: ",", precision: 0)}
          - else
            - if @action == "collected"
              = I18n.t('taxa.none_collected', taxon: h(@taxon.family))
            - else
              = I18n.t('taxa.none_identified', taxon: h(@taxon.family))

    = haml :'partials/taxa/search', layout: false

- if admin_authorized?
  %div{class:"mt-3 mb-3 pt-3 border-top text-center"}
    %a{href: url("/admin/taxon/#{@taxon.family}")}
      %i{class:"fas fa-cog"}
      = I18n.t('general.settings')

= haml :'partials/taxa/tabs', layout: false, locals: { active_tab: locals[:active_tab] }
= haml :'partials/taxa/people_viz_nav', layout: false, locals: { active_subtab: locals[:active_subtab] }

%h3{class:"mt-3"}= I18n.t('taxa.timeline')

- if @timeline.size == 0
  %div{class: "alert alert-warning tiny-margins", role: "alert"}
    - if @action == "collected"
      = I18n.t('taxa.none_collected_timeline', taxon: h(@taxon.family))
    - else
      = I18n.t('taxa.none_identified_timeline', taxon: h(@taxon.family))

- elsif @timeline.size == 1
  %ul{class:"list-unstyled"}
    %li
      %a{href: "/#{@timeline[0][0]}/specimens?family=#{@taxon.family}&action=#{@action}"}
        #{@timeline[0][1]}
      %span{class:"ml-2 badge badge-light"}
        #{number_with_delimiter(@timeline[0][5])}
      #{I18n.t('card.claimed', count: @timeline[0][5])},
      #{Date.parse(@timeline[0][3]).strftime("%F")} â€“ #{Date.parse(@timeline[0][4]).strftime("%F")}

- else
  = haml :'partials/taxa/timeline_filter', layout:false, locals: params

%div{id: "timeline", style:"height:100%;", class:"mt-4"}
