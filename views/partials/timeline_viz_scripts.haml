- content_for :scripts do
  %script{src: "/js/application.js"}
  %script{src: "//www.gstatic.com/charts/loader.js"}
  %script{src: "/js/jquery.throttledresize.js"}

  :javascript
    $.fn.outerHTML = function(s) {
    return (s)
      ? this.before(s).remove()
      : jQuery("<p>").append(this.eq(0).clone()).html();
    }

    $(function() {
      Application.init("", "GET", "/taxa");

      var timeline = #{@timeline};

      function range(a, b) {
        if (a === b) {
          return a.toString();
        } else {
          return a + " â€“ " + b;
        }
      }

      function popup(html, range) {
        return $(html).find(".range").text(range).parents(".card").outerHTML();
      }

      function timeLine() {
        var part = [];
        $.each(timeline, function() {
          var startDate = new Date(this[3]);
          var endDate = new Date(this[4]);
          var startYear = startDate.getFullYear();
          var endYear = endDate.getFullYear();
          var birthDate = (this[5] !== "") ? new Date(this[5]) : "";
          var deathDate = (this[6] !== "") ? new Date(this[6]) : "";
          if (birthDate && deathDate) {
            var proper_order = [ birthDate, startDate, endDate, deathDate ];
            var sorted_order = proper_order.slice().sort(function(a,b) { return a - b; });
            var birthYear = birthDate.getFullYear();
            var deathYear = deathDate.getFullYear();
            if (JSON.stringify(proper_order) === JSON.stringify(sorted_order)) {
              part.push([ this[1], range(startYear, endYear), popup(this[2], range(startYear, endYear)), 'fill-color:#3a7179;', startDate, endDate ]);
            } else {
              if (birthDate >= endDate) {
                part.push([ this[1], range(startYear, endYear), popup(this[2], range(startYear, endYear)), 'fill-color:#dc3545;', startDate, endDate ]);
              } else if (deathDate <= startDate) {
                part.push([ this[1], range(startYear, endYear), popup(this[2], range(startYear, endYear)), 'fill-color:#dc3545;', startDate, endDate ]);
              } else if (birthDate >= startDate && endDate <= deathDate) {
                part.push([ this[1], range(startYear, birthYear), popup(this[2], range(startYear, birthYear)), 'fill-color:#dc3545;', startDate, birthDate ]);
                part.push([ this[1], range(birthYear, endYear), popup(this[2], range(birthYear, endYear)), 'fill-color:#3a7179;', birthDate, endDate ]);
              } else if (birthDate >= startDate && endDate > deathDate) {
                part.push([ this[1], range(startYear, birthYear), popup(this[2], range(startYear, birthYear)), 'fill-color:#dc3545;', startDate, birthDate ]);
                part.push([ this[1], range(birthYear, deathYear), popup(this[2], range(birthYear, deathYear)), 'fill-color:#3a7179;', birthDate, deathDate ]);
                part.push([ this[1], range(deathYear, endYear), popup(this[2], range(deathYear, endYear)), 'fill-color:#dc3545;', deathDate, endDate ]);
              } else if (birthDate < startDate && endDate >= deathDate) {
                part.push([ this[1], range(startYear, deathYear), popup(this[2], range(startYear, deathYear)), 'fill-color:#3a7179;', startDate, deathDate ]);
                part.push([ this[1], range(deathYear, endYear), popup(this[2], range(deathYear, endYear)), 'fill-color:#dc3545;', deathDate, endDate ]);
              }
            }
          } else if ( !birthDate && !deathDate) {
            if (endYear - startYear >= 120 ) {
              part.push([ this[1], range(startYear, endYear), popup(this[2], range(startYear, endYear)), 'fill-color:#dc3545;', startDate, endDate ]);
            } else {
              part.push([ this[1], range(startYear, endYear), popup(this[2], range(startYear, endYear)), 'fill-color:#3a7179;', startDate, endDate ]);
            }
          } else {
            if(!deathDate && birthDate >= endDate) {
              part.push([ this[1], range(startYear, endYear), popup(this[2], range(startYear, endYear)), 'fill-color:#dc3545;', startDate, endDate ]);
            } else if (!deathDate && birthDate >= startDate) {
              var birthYear = birthDate.getFullYear();
              part.push([ this[1], range(startYear, birthYear), popup(this[2], range(startYear, birthYear)), 'fill-color:#dc3545;', startDate, birthDate ]);
              part.push([ this[1], range(birthYear, endYear), popup(this[2], range(birthYear, endYear)), 'fill-color:#3a7179;', birthDate, endDate ]);
            } else if (!deathDate && birthDate < startDate) {
              part.push([ this[1], range(startYear, endYear), popup(this[2], range(startYear, endYear)), 'fill-color:#3a7179;', startDate, endDate ]);
            }
            if(!birthDate && deathDate <= startDate) {
              part.push([ this[1], range(startYear, endYear), popup(this[2], range(startYear, endYear)), 'fill-color:#dc3545;', startDate, endDate ]);
            } else if (!birthDate && deathDate <= endDate) {
              var deathYear = deathDate.getFullYear();
              part.push([ this[1], range(startYear, deathYear), popup(this[2], range(startYear, deathYear)), 'fill-color:#3a7179;', startDate, deathDate ]);
              part.push([ this[1], range(deathYear, endYear), popup(this[2], range(deathYear, endYear)), 'fill-color:#dc3545;', deathDate, endDate ]);
            } else if (!birthDate && deathDate > endDate) {
              part.push([ this[1], range(startYear, endYear), popup(this[2], range(startYear, endYear)), 'fill-color:#3a7179;', startDate, endDate ]);
            }
          }
        });
        return part;
      }

      function drawVisualizations() {
        var container = $('#timeline')[0],
            chart = new google.visualization.Timeline(container),
            dataTable = new google.visualization.DataTable(),
            rowHeight = 41,
            options = {};

        if (timeline.length == 1) {
          return;
        }

        if (timeline.length > 1) {
          dataTable.addColumn({ type: 'string', id: 'Fullname' });
          dataTable.addColumn({ type: 'string', id: 'Bar label' });
          dataTable.addColumn({ type: 'string', role: 'tooltip' });
          dataTable.addColumn({ type: 'string', role: 'style' });
          dataTable.addColumn({ type: 'date', id: 'Start' });
          dataTable.addColumn({ type: 'date', id: 'End' });
          dataTable.addRows(timeLine());
          options = {
            height: (timeline.length * rowHeight) + 50,
            timeline: {
              groupByRowLabel: true,
              avoidOverlappingGridLines: false
            }
          };

          google.visualization.events.addListener(chart, 'onmouseover', function(e) {
            if (e.row !== null) { $('#timeline').css('cursor','pointer'); }
          });
          google.visualization.events.addListener(chart, 'onmouseout', function() { $('#timeline').css('cursor','default'); });
          google.visualization.events.addListener(chart, 'select', function() {
            var sel = chart.getSelection()[0];
            var id = $(dataTable.getValue(sel.row, 2)).attr("data-identifier");
            var start_year = dataTable.getValue(sel.row, 4).getFullYear() - 1;
            var end_year = dataTable.getValue(sel.row, 5).getFullYear() + 1;
            var extra_param = ""
            if (typeof sel.row !== "undefined" && sel.row !== null) {
              window.location = "/" + id + "/specimens?action=#{@action}&start_year=" + start_year + "&end_year=" + end_year + "#{locals[:extra_param]}";
            }
          });

          chart.draw(dataTable, options);
        }
      }

      google.charts.load('current', {
        packages: ['timeline'],
        language: '#{I18n.locale.to_s}',
        mapsApiKey: "#{Settings.google.api_key}"
      });
      google.charts.setOnLoadCallback(drawVisualizations);

      $(window).on("throttledresize", function(event) {
        drawVisualizations();
      });

    });
